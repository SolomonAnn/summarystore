data-dir = "workdir"                # where we store SummaryStore (RocksDB) data
results-dir = "workdir"             # where we store experiment output
window-cache-size = 1_000_000       # number of windows to cache in memory
ingest-buffer-size = 2_000_000      # number of values to buffer before triggering merge
host-ip = "127.0.0.1"
host-port = 8080

# List of decay functions. Allowed vals: exponentialBASE, rationalPowerP,Q,R,S
decay-functions = [
    "exponential2",
    "rationalPower1,1,1,1",
    "rationalPower1,1,2,1",
    "rationalPower1,1,4,1",
    "rationalPower1,1,8,1",
]

# List of operators to maintain in each SummaryStore
# (names of classes in the com.samsung.sra.DataStore.Aggregates package)
operators = ["SimpleCountOperator", "SumOperator"]

# Total number of streams in dataset. Need to use Par* scripts for multi-stream
[streams]
nstreams = 10
nstreams-per-shard = 3

# Dataset (stream generator) specification for a single stream
[data]
tstart = 0                                   # all queries/data will span [tstart, tend]
tend = 31_536_000                            # 1 year, timestamps in seconds
stream-generator = "RandomStreamGenerator"   # name of class in the com.samsung.sra.DataStoreExperiments package
interarrivals = {distribution = "ExponentialDistribution", lambda = 1.0}
values = {distribution = "UniformDistribution", min = 1, max = 100}
random-seed = 0                              # RandomStreamGenerator seed. Optional, defaults to 0

## Use com.samsung.sra.DataStoreExperiments.CSVStreamGenerator instead
#stream-generator = "ReplayStreamGenerator"
#file = "/Users/a.vulimiri/samsung/summarystore/code/workloads/google-cluster-data/task_event_count"
#tstart = 600026913
#tend = 2506198209912


# Workload specification
[workload]
# Use com.samsung.sra.DataStoreExperiments.CalendarWorkloadGenerator
workload-generator = "CalendarWorkloadGenerator"
operators = [{index = 0, type = "count"}, {index = 1, type = "sum"}]
#operators = [{index = 2, type = "cms", param = {distribution = "ZipfDistribution", N = 100, k = 1}}]
ticks-per-second = 1   # optional, default 1. E.g. set to 1000 if data timestamps are in ms


[performance]
num-ingest-threads = 8 # optional, defaults to nstreams-per-shard
# Process queries in parallel when generating workload. Adds a couple of
# minutes of stream management overhead, only recommended in large streams
parallel-workload-gen = true   # optional, default false
# Drop kernel page/inode/dentries caches before starting query workload
drop-caches = false            # optional, default false

# static config for summary nodes
[nodes]
num-nodes = 1
nodeips = [{index = 0, ip = "127.0.0.2", port = "8080"}]

#, {index = 1, ip = "127.0.0.2", port = "8080"}, {index = 2, ip = "127.0.0.3", port = "8080"},]


