/*
* Copyright 2016 Samsung Research America. All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.samsung.sra.datastore;

import org.apache.commons.lang.SerializationUtils;
import org.rocksdb.Options;
import org.rocksdb.RocksDB;
import org.rocksdb.RocksDBException;
import org.rocksdb.RocksIterator;

import java.io.Serializable;
import java.nio.ByteBuffer;
import java.util.HashMap;

/**
 * Stores all elements explicitly enumerated.
 */
public class EnumeratedStore implements DataStore {
    private RocksDB rocksDB;
    private Options rocksDBOptions;

    private static class StreamInfo implements Serializable {
        final long streamID;
        final Object syncObj = new Object();
        int numValues = 0;
        long lastValueTimestamp = -1;

        StreamInfo(long streamID) {
            this.streamID = streamID;
        }
    }

    private final HashMap<Long, StreamInfo> streamsInfo;

    private final static byte[] streamsInfoSpecialKey = {};

    private void persistStreamsInfo() throws RocksDBException {
        rocksDB.put(streamsInfoSpecialKey, SerializationUtils.serialize(streamsInfo));
    }

    public EnumeratedStore(String rocksDBPath) throws RocksDBException {
        rocksDBOptions = new Options().setCreateIfMissing(true);
        rocksDB = RocksDB.open(rocksDBOptions, rocksDBPath);

        byte[] streamCountsBytes = rocksDB.get(streamsInfoSpecialKey);
        streamsInfo = streamCountsBytes != null ?
                (HashMap<Long, StreamInfo>) SerializationUtils.deserialize(streamCountsBytes) :
                new HashMap<>();
    }

    public void registerStream(long streamID, WindowingMechanism windowingMechanism) throws StreamException, RocksDBException {
        synchronized (streamsInfo) {
            if (streamsInfo.containsKey(streamID)) {
                throw new StreamException("attempting to register stream " + streamID + " twice");
            } else {
                streamsInfo.put(streamID, new StreamInfo(streamID));
            }
        }
    }

    private byte[] getRocksKey(long streamID, long t) {
        ByteBuffer bytebuf = ByteBuffer.allocate(8 + 8);
        bytebuf.putLong(streamID);
        bytebuf.putLong(t);
        bytebuf.flip();
        return bytebuf.array();
    }

    private long parseRocksKeyTimestamp(byte[] bytes, long streamID) {
        ByteBuffer bytebuf = ByteBuffer.wrap(bytes);
        long readStreamID = bytebuf.getLong();
        assert streamID == readStreamID;
        return bytebuf.getLong();
    }

    private long parseRocksValue(byte[] bytes) throws RocksDBException {
        ByteBuffer bytebuf = ByteBuffer.allocate(8);
        bytebuf.put(bytes);
        bytebuf.flip();
        return bytebuf.getLong();
    }

    private void rocksPut(long streamID, long t, long value) throws RocksDBException {
        ByteBuffer bytebuf = ByteBuffer.allocate(8);
        bytebuf.putLong(value);
        bytebuf.flip();
        rocksDB.put(getRocksKey(streamID, t), bytebuf.array());
    }

    public Object query(long streamID,
                        long t0, long t1, QueryType queryType, Object[] queryParams)
            throws StreamException, QueryException, RocksDBException {
        if (t0 < 0 || t0 > t1) {
            throw new QueryException("[" + t0 + ", " + t1 + "] is not a valid time interval");
        }
        StreamInfo streamInfo;
        synchronized (streamsInfo) {
            streamInfo = streamsInfo.get(streamID);
            if (streamInfo == null) {
                throw new StreamException("querying invalid stream " + streamID);
            }
        }
        long ret = 0;
        synchronized (streamInfo.syncObj) {
            RocksIterator iter = null;
            try {
                iter = rocksDB.newIterator();
                for (iter.seek(getRocksKey(streamID, t0)); iter.isValid(); iter.next()) {
                    long t = parseRocksKeyTimestamp(iter.key(), streamID);
                    if (t > t1) {
                        break;
                    }
                    long v = parseRocksValue(iter.value());
                    switch (queryType) {
                        case COUNT:
                            ret += 1;
                            break;
                        case SUM:
                            ret += v;
                            break;
                        default:
                            throw new QueryException(("invalid query type " + queryType));
                    }
                }
            } finally {
                if (iter != null) iter.dispose();
            }
        }
        return ret;
    }

    @Override
    public void append(long streamID, long ts, Object value) throws StreamException, RocksDBException {
        StreamInfo streamInfo;
        synchronized (streamsInfo) {
            streamInfo = streamsInfo.get(streamID);
            if (streamInfo == null) {
                throw new StreamException("querying invalid stream " + streamID);
            }
        }
        synchronized (streamInfo.syncObj) {
            assert streamInfo.lastValueTimestamp == -1 || streamInfo.lastValueTimestamp < ts;
            streamInfo.lastValueTimestamp = ts;
            ++streamInfo.numValues;
            rocksPut(streamID, ts, (Long)value);
        }
    }

    public void close() throws RocksDBException {
        // FIXME: should wait for any processing appends to terminate first
        persistStreamsInfo();
        if (rocksDB != null) {
            rocksDB.close();
        }
        rocksDBOptions.dispose();
    }

    public long getStoreSizeInBytes() {
        // TODO: synchronize
        long ret = 0;
        for (StreamInfo streamInfo: streamsInfo.values()) {
            ret += streamInfo.numValues * (8 + 8 + 8);
        }
        return ret;
    }

    @Override
    public long getStreamAge(long streamID) throws StreamException {
        StreamInfo streamInfo;
        synchronized (streamsInfo) {
            streamInfo = streamsInfo.get(streamID);
            if (streamInfo == null) {
                throw new StreamException("attempting to get age of unknown stream " + streamID);
            }
        }
        return streamInfo.lastValueTimestamp;
    }

    @Override
    public long getStreamCount(long streamID) throws StreamException {
        StreamInfo streamInfo;
        synchronized (streamsInfo) {
            streamInfo = streamsInfo.get(streamID);
            if (streamInfo == null) {
                throw new StreamException("attempting to get age of unknown stream " + streamID);
            }
        }
        return streamInfo.numValues;
    }

    public static void main(String[] args) {
        DataStore store = null;
        try {
            String storeLoc = "/tmp/tdstore";
            // FIXME: add a deleteStream/resetDatabase operation
            Runtime.getRuntime().exec(new String[]{"rm", "-rf", storeLoc}).waitFor();
            store = new EnumeratedStore(storeLoc);
            long streamID = 0;
            store.registerStream(streamID, null);
            for (long i = 0; i < 10; ++i) {
                store.append(streamID, i, i + 1);
            }
            long t0 = 0, t1 = 3;
            System.out.println(
                    "sum[" + t0 + ", " + t1 + "] = " + store.query(streamID, t0, t1, QueryType.SUM, null) + "; " +
                            "count[" + t0 + ", " + t1 + "] = " + store.query(streamID, t0, t1, QueryType.COUNT, null));
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (store != null) {
                try {
                    store.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
